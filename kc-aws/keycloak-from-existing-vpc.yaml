Description: >-
  (SO8021) - Deploy keycloak rds mysql with existing vpc. template version:
  v2.1.1
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Application Load Balancer Settings
        Parameters:
          - CertificateArn
      - Label:
          default: Database Instance Settings
        Parameters:
          - DatabaseInstanceType
      - Label:
          default: VPC Settings
        Parameters:
          - VpcId
          - PubSubnets
          - PrivSubnets
          - DBSubnets
      - Label:
          default: AutoScaling Settings
        Parameters:
          - MinContainers
          - MaxContainers
          - AutoScalingTargetCpuUtilization
      - Label:
          default: Environment variable
        Parameters:
          - JavaOpts
Parameters:
  CertificateArn:
    Type: String
    Description: Certificate Arn for Application Load Balancer
    MinLength: 5
  DatabaseInstanceType:
    Type: String
    Default: r5.large
    AllowedValues:
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - t3.small
      - t3.medium
    Description: Instance type to be used for the core instances
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Your VPC Id
  PubSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Public subnets (Choose two)
  PrivSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Private subnets (Choose two)
  DBSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Database subnets (Choose two)
  MinContainers:
    Type: Number
    Default: 2
    Description: minimum containers count
    MinValue: 2
  MaxContainers:
    Type: Number
    Default: 10
    Description: maximum containers count
    MinValue: 2
  AutoScalingTargetCpuUtilization:
    Type: Number
    Default: 75
    Description: Auto scaling target cpu utilization
    MinValue: 0
  JavaOpts:
    Type: String
    Default: '-server -Xms1024m -Xmx1638m'
    Description: JAVA_OPTS environment variable
Resources:
  KeyCloakDatabaseDBClusterSubnetsE36F1B1B:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnets for DBCluster database
      SubnetIds:
        - !Select 
          - 0
          - !Ref DBSubnets
        - !Select 
          - 1
          - !Ref DBSubnets
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Subnets/Default
  KeyCloakDatabaseDBClusterSecurityGroup843B4392:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref 'AWS::NoValue'
          Description: !Join 
            - ''
            - - 'from '
              - !Ref 'AWS::NoValue'
              - ':3306'
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      VpcId: !Ref VpcId
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/SecurityGroup/Resource
  KeyCloakDatabaseDBClusterSecurityGroupfromkeycloakfromexistingvpcKeyCloakDatabaseDBClusterSecurityGroupE23DA62233061FF24E19:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        from
        keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecurityGroupE23DA622:3306
      FromPort: 3306
      GroupId: !GetAtt 
        - KeyCloakDatabaseDBClusterSecurityGroup843B4392
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakDatabaseDBClusterSecurityGroup843B4392
        - GroupId
      ToPort: 3306
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecurityGroupE23DA622:3306
  KeyCloakDatabaseDBClusterSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750DIndirectPort4F14C381:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:{IndirectPort}
      FromPort: !GetAtt 
        - KeyCloakDatabaseDBCluster06E9C0E1
        - Endpoint.Port
      GroupId: !GetAtt 
        - KeyCloakDatabaseDBClusterSecurityGroup843B4392
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      ToPort: !GetAtt 
        - KeyCloakDatabaseDBCluster06E9C0E1
        - Endpoint.Port
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:{IndirectPort}
  keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecret5D026FA73fdaad7efa858a3daf9490cf0a702aeb:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: !Join 
        - ''
        - - 'Generated by the CDK for stack: '
          - !Ref 'AWS::StackName'
      GenerateSecretString:
        ExcludeCharacters: ' %+~`#$&*()|[]{}:;<>?!''/@"\'
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"admin"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Secret/Resource
  KeyCloakDatabaseDBClusterSecretAttachment50401C92:
    Type: 'AWS::SecretsManager::SecretTargetAttachment'
    Properties:
      SecretId: !Ref >-
        keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecret5D026FA73fdaad7efa858a3daf9490cf0a702aeb
      TargetId: !Ref KeyCloakDatabaseDBCluster06E9C0E1
      TargetType: 'AWS::RDS::DBCluster'
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Secret/Attachment/Resource
  KeyCloakDatabaseDBCluster06E9C0E1:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora-mysql
      BackupRetentionPeriod: 7
      CopyTagsToSnapshot: true
      DatabaseName: keycloak
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName: !Ref KeyCloakDatabaseDBClusterSubnetsE36F1B1B
      DeletionProtection: true
      EngineVersion: 5.7.mysql_aurora.2.09.1
      MasterUsername: admin
      MasterUserPassword: !Join 
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref >-
            keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecret5D026FA73fdaad7efa858a3daf9490cf0a702aeb
          - ':SecretString:password::}}'
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !GetAtt 
          - KeyCloakDatabaseDBClusterSecurityGroup843B4392
          - GroupId
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Resource
  KeyCloakDatabaseDBClusterInstance12532FD3D:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: !Join 
        - ''
        - - db.
          - !Ref DatabaseInstanceType
      DBClusterIdentifier: !Ref KeyCloakDatabaseDBCluster06E9C0E1
      DBSubnetGroupName: !Ref KeyCloakDatabaseDBClusterSubnetsE36F1B1B
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.09.1
      PubliclyAccessible: false
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Instance1
  KeyCloakDatabaseDBClusterInstance2EE80EFE4:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: !Join 
        - ''
        - - db.
          - !Ref DatabaseInstanceType
      DBClusterIdentifier: !Ref KeyCloakDatabaseDBCluster06E9C0E1
      DBSubnetGroupName: !Ref KeyCloakDatabaseDBClusterSubnetsE36F1B1B
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.09.1
      PubliclyAccessible: false
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/Database/DBCluster/Instance2
  KeyCloakKCSecretF8498E5C:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 12
        SecretStringTemplate: '{"username":"keycloak"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/KeyCloak/KCSecret/Resource
  KeyCloakKeyCloakContainerSerivceClusterA18E44FF:
    Type: 'AWS::ECS::Cluster'
    DependsOn:
      - KeyCloakDatabaseDBClusterInstance12532FD3D
      - KeyCloakDatabaseDBClusterInstance2EE80EFE4
      - KeyCloakDatabaseDBCluster06E9C0E1
      - KeyCloakDatabaseDBClusterSecretAttachment50401C92
      - >-
        keycloakfromexistingvpcKeyCloakDatabaseDBClusterSecret5D026FA73fdaad7efa858a3daf9490cf0a702aeb
      - >-
        KeyCloakDatabaseDBClusterSecurityGroupfromkeycloakfromexistingvpcKeyCloakDatabaseDBClusterSecurityGroupE23DA62233061FF24E19
      - >-
        KeyCloakDatabaseDBClusterSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750DIndirectPort4F14C381
      - KeyCloakDatabaseDBClusterSecurityGroup843B4392
      - KeyCloakDatabaseDBClusterSubnetsE36F1B1B
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Cluster/Resource
  KeyCloakKeyCloakContainerSerivceTaskRole0658CED2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/TaskRole/Resource
  KeyCloakKeyCloakContainerSerivceTaskRoleDefaultPolicyA2321E87:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: !GetAtt 
              - KeyCloakKeyCloakContainerSerivceLogGroup010F2AAE
              - Arn
          - Action:
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
            Effect: Allow
            Resource: !Ref KeyCloakDatabaseDBClusterSecretAttachment50401C92
          - Action:
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
            Effect: Allow
            Resource: !Ref KeyCloakKCSecretF8498E5C
        Version: 2012-10-17
      PolicyName: KeyCloakKeyCloakContainerSerivceTaskRoleDefaultPolicyA2321E87
      Roles:
        - !Ref KeyCloakKeyCloakContainerSerivceTaskRole0658CED2
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/TaskRole/DefaultPolicy/Resource
  KeyCloakKeyCloakContainerSerivceTaskDefTaskRole0DC4D418:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/TaskDef/TaskRole/Resource
  KeyCloakKeyCloakContainerSerivceTaskDef30C9533A:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: DB_ADDR
              Value: !GetAtt 
                - KeyCloakDatabaseDBCluster06E9C0E1
                - Endpoint.Address
            - Name: DB_DATABASE
              Value: keycloak
            - Name: DB_PORT
              Value: '3306'
            - Name: DB_USER
              Value: admin
            - Name: DB_VENDOR
              Value: mysql
            - Name: PROXY_ADDRESS_FORWARDING
              Value: 'true'
            - Name: JDBC_PARAMS
              Value: useSSL=false
            - Name: JGROUPS_DISCOVERY_PROTOCOL
              Value: JDBC_PING
            - Name: JAVA_OPTS
              Value: !Ref JavaOpts
          Essential: true
          Image: !FindInMap 
            - KeyCloakKeyCloakContainerSerivceKeycloakImageMapF79EAEA3
            - !Ref 'AWS::Partition'
            - uri
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KeyCloakKeyCloakContainerSerivceLogGroup010F2AAE
              awslogs-stream-prefix: keycloak
              awslogs-region: !Ref 'AWS::Region'
          Name: keycloak
          PortMappings:
            - ContainerPort: 8443
              Protocol: tcp
            - ContainerPort: 7600
              Protocol: tcp
            - ContainerPort: 57600
              Protocol: tcp
            - ContainerPort: 55200
              Protocol: udp
            - ContainerPort: 54200
              Protocol: udp
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Join 
                - ''
                - - !Ref KeyCloakDatabaseDBClusterSecretAttachment50401C92
                  - ':password::'
            - Name: KEYCLOAK_USER
              ValueFrom: !Join 
                - ''
                - - !Ref KeyCloakKCSecretF8498E5C
                  - ':username::'
            - Name: KEYCLOAK_PASSWORD
              ValueFrom: !Join 
                - ''
                - - !Ref KeyCloakKCSecretF8498E5C
                  - ':password::'
      Cpu: '4096'
      ExecutionRoleArn: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceTaskRole0658CED2
        - Arn
      Family: keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceTaskDef11C0540C
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceTaskDefTaskRole0DC4D418
        - Arn
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/TaskDef/Resource
  KeyCloakKeyCloakContainerSerivceLogGroup010F2AAE:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/LogGroup/Resource
  KeyCloakKeyCloakContainerSerivceService79D3F427:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref KeyCloakKeyCloakContainerSerivceClusterA18E44FF
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref MinContainers
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 120
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: keycloak
          ContainerPort: 8443
          TargetGroupArn: !Ref >-
            KeyCloakKeyCloakContainerSerivceALBHttpsListenerECSTargetGroupCE3EF52C
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt 
              - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
              - GroupId
          Subnets:
            - !Select 
              - 0
              - !Ref PrivSubnets
            - !Select 
              - 1
              - !Ref PrivSubnets
      TaskDefinition: !Ref KeyCloakKeyCloakContainerSerivceTaskDef30C9533A
    DependsOn:
      - KeyCloakKeyCloakContainerSerivceALBHttpsListenerECSTargetGroupCE3EF52C
      - KeyCloakKeyCloakContainerSerivceALBHttpsListener140F85B9
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/Service
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref VpcId
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/Resource
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D7600040A97AC:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: kc jgroups-tcp
      FromPort: 7600
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      ToPort: 7600
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:7600
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D5760088205E46:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: kc jgroups-tcp-fd
      FromPort: 57600
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      ToPort: 57600
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:57600
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750DUDP552006C21BE87:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: udp
      Description: kc jgroups-udp
      FromPort: 55200
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      ToPort: 55200
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:UDP
        55200
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750DUDP54200621863BC:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: udp
      Description: kc jgroups-udp-fd
      FromPort: 54200
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      ToPort: 54200
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:UDP
        54200
  KeyCloakKeyCloakContainerSerivceServiceSecurityGroupfromkeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceALBSecurityGroupA3E4F09F844343EF5648:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8443
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceALBSecurityGroup8F5103C6
        - GroupId
      ToPort: 8443
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/SecurityGroup/from
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceALBSecurityGroupA3E4F09F:8443
  KeyCloakKeyCloakContainerSerivceServiceTaskCountTarget0EDF86B3:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxContainers
      MinCapacity: !Ref MinContainers
      ResourceId: !Join 
        - ''
        - - service/
          - !Ref KeyCloakKeyCloakContainerSerivceClusterA18E44FF
          - /
          - !GetAtt 
            - KeyCloakKeyCloakContainerSerivceService79D3F427
            - Name
      RoleARN: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':iam::'
          - !Ref 'AWS::AccountId'
          - >-
            :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/TaskCount/Target/Resource
  KeyCloakKeyCloakContainerSerivceServiceTaskCountTargetCpuScaling1480DC0B:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: >-
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceTaskCountTargetCpuScaling863532E1
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref KeyCloakKeyCloakContainerSerivceServiceTaskCountTarget0EDF86B3
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetCpuUtilization
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/Service/TaskCount/Target/CpuScaling/Resource
  KeyCloakKeyCloakContainerSerivceALBE100B67D:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 
          - KeyCloakKeyCloakContainerSerivceALBSecurityGroup8F5103C6
          - GroupId
      Subnets:
        - !Select 
          - 0
          - !Ref PubSubnets
        - !Select 
          - 1
          - !Ref PubSubnets
      Type: application
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/ALB/Resource
  KeyCloakKeyCloakContainerSerivceALBSecurityGroup8F5103C6:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Automatically created Security Group for ELB
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceALB56B4FF65
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VpcId
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/ALB/SecurityGroup/Resource
  KeyCloakKeyCloakContainerSerivceALBSecurityGrouptokeycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D8443B22B58B8:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceALBSecurityGroup8F5103C6
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt 
        - KeyCloakKeyCloakContainerSerivceServiceSecurityGroup4C80023D
        - GroupId
      FromPort: 8443
      ToPort: 8443
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/ALB/SecurityGroup/to
        keycloakfromexistingvpcKeyCloakKeyCloakContainerSerivceServiceSecurityGroupF19D750D:8443
  KeyCloakKeyCloakContainerSerivceALBHttpsListener140F85B9:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref >-
            KeyCloakKeyCloakContainerSerivceALBHttpsListenerECSTargetGroupCE3EF52C
          Type: forward
      LoadBalancerArn: !Ref KeyCloakKeyCloakContainerSerivceALBE100B67D
      Certificates:
        - CertificateArn: !Ref CertificateArn
      Port: 443
      Protocol: HTTPS
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/ALB/HttpsListener/Resource
  KeyCloakKeyCloakContainerSerivceALBHttpsListenerECSTargetGroupCE3EF52C:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthyThresholdCount: 3
      Port: 8443
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: slow_start.duration_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '604800'
      TargetType: ip
      VpcId: !Ref VpcId
    Metadata:
      'aws:cdk:path': >-
        keycloak-from-existing-vpc/KeyCloak/KeyCloakContainerSerivce/ALB/HttpsListener/ECSTargetGroup/Resource
  CDKMetadata:
    Type: 'AWS::CDK::Metadata'
    Properties:
      Analytics: >-
        v2:deflate64:H4sIAAAAAAAA/31S207DMAz9Ft5DoBNC4g3YACGBQHQ/4KVeCWuTKnGGUNV/x0lo6ZjEU5xzfHwvZF9cnsvzk2v49Keq2p31yjqUfUmgdmK5Na/goEVCJ97Q2+AURvQlUBcoWs/QddrUYmmNJxdUAueuTFSatDWDiDl6Da3s32yTyPS+2karr5QsWYNobO1l/2TrB2dDF5nRHoZBFJeL44qnlCmJq1i/AoINeFw2wccGyrAxSFPI1e0cGJ1LVA4p86MwfR65PzAKB4FqwQNCFZymrync/8CjqR16f4TfJXgQPqX1LRio0ck++8VK8rMGVyPdEK/lvUVDYnI4YjIcy+QZzFoYzXsWAOEa/G6FW23ScqLDX8QaAm3QzbAfbYlur/N6R7NU0MCmSWGXNhgu4GjTfAFdxxuGGAsCWc8iPh6e5qSOzaS4h0h+1o6vkgVl1v0ezgHArTfgSavGQrXhMEYxt+el3fymf2LuNnF5Ogf/uZ/moZkfn9Ge8bmwaemz7xBv1dgK5Yc/2xcXsriSi5MPr/Wp4/nolo82v9/jSChmhgMAAA==
    Metadata:
      'aws:cdk:path': keycloak-from-existing-vpc/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  KeyCloakDatabaseDBSecretArn28BEB641:
    Value: !Ref KeyCloakDatabaseDBClusterSecretAttachment50401C92
  KeyCloakDatabaseclusterEndpointHostname38FB0D1E:
    Value: !GetAtt 
      - KeyCloakDatabaseDBCluster06E9C0E1
      - Endpoint.Address
  KeyCloakDatabaseclusterIdentifierF00C290B:
    Value: !Ref KeyCloakDatabaseDBCluster06E9C0E1
  KeyCloakKeyCloakContainerSerivceEndpointURL9C81E19A:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - KeyCloakKeyCloakContainerSerivceALBE100B67D
          - DNSName
Mappings:
  KeyCloakKeyCloakContainerSerivceKeycloakImageMapF79EAEA3:
    aws:
      uri: 'jboss/keycloak:16.1.1'
    aws-cn:
      uri: >-
        048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/dockerhub/jboss/keycloak:16.1.1
Conditions:
  CDKMetadataAvailable: !Or 
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - af-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ca-central-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-northwest-1
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-central-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-2
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-3
      - !Equals 
        - !Ref 'AWS::Region'
        - me-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - sa-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-2
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-2